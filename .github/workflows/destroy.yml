name: Destroy me

on:
  workflow_dispatch:

env:
  ORG: akash-network
  REPO: provider
  CLIENT: provider-services
  CLIENT_VERSION: 0.1.0
  ARCH: amd64
  # Akash Network
  NET: mainnet
  #BLOCK_TIME: 6s
  BLOCK_TIME: 1s
  # Quit if chain is running 30 seconds behind
  CHAIN_LATENCY: 30
  # Akash Client parameters
  AKASH_KEYRING_BACKEND: file
  AKASH_BROADCAST_MODE: block
  #AKASH_BROADCAST_MODE: async
  AKASH_YES: 1
  AKASH_GAS_PRICES: 0.025uakt
  AKASH_GAS: auto
  AKASH_GAS_ADJUSTMENT: 1.5
  AKASH_HOME: /home/runner/.akash
  AKASH_FROM: default
  AKASH_OUTPUT: json
  # Minimum balance on the wallet in AKT
  MIN_BALANCE: 10
  AKASH_GSEQ: 1
  AKASH_OSEQ: 1
  SDL: deploy.yaml
  #PROVIDER: akash18ga02jzaq8cw52anyhzkwta5wygufgu6zsz6xc


jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Call Initialize Akash client
      uses: ./.github/actions/init-akash
      with:
        seed: ${{ secrets.SEED }}
        password: ${{ secrets.PASSWORD }}

    - name: Call Restore State
      uses: ./.github/actions/restore-state

    - name: Close deployment
      id: close-deployment
      if: steps.deployment-state.outputs.state == 'active'
      env:
        PASSWORD: ${{ secrets.PASSWORD }}
      run: |
        echo "Closing deployment"

        ## === broadcast tx === ##
        TX=$(echo "${PASSWORD}" | ${CLIENT} tx deployment close | jq -r '.txhash')
        if test -z $TX; then
          echo "No TX broadcasted!"
          exit 1
        fi
        echo "TX: $TX"
        sleep ${BLOCK_TIME}
        RC=$(${CLIENT} query tx $TX | jq -r '.code')
        case $RC in
          0)
            echo "TX successful"
            ;;
          11)
            echo "Out of gas! Consider raising AKASH_GAS_ADJUSTMENT and trying again."
            exit 1
            ;;
          *)
            echo "Transaction $TX failed with code: '$RC'"
            exit 1
            ;;
        esac
        ## === broadcast tx === ##

    - name: Remove the state if deployment is inactive
      id: remove-state
      if: ( steps.close-deployment.outcome == 'success' || steps.close-deployment.outcome == 'skipped' )
      run: |
        echo "AKASH_DSEQ=" >> $GITHUB_ENV
        echo "AKASH_PROVIDER=" >> $GITHUB_ENV
        rm -vf .akash/DSEQ .akash/PROVIDER .akash/STATUS

    - name: Commit & Push changes
      uses: actions-js/push@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
